<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ReactiveUI.Mobile</name>
    </assembly>
    <members>
        <member name="T:ReactiveUI.Mobile.ReactiveGeolocator">
            <summary>
            ReactiveGeolocator is an API to convert Xamarin Geolocation into 
            something Rx-friendly.
            </summary>
        </member>
        <member name="M:ReactiveUI.Mobile.ReactiveGeolocator.Listen(System.Int32,System.Double,System.Boolean)">
            <summary>
            Returns an IObservable that continuously updates as the user's
            physical location changes. It is super important to make sure to
            dispose all subscriptions to this IObservable.
            </summary>
            <param name="minUpdateTime">Minimum update time.</param>
            <param name="minUpdateDist">Minimum update dist.</param>
            <param name="includeHeading">If set to <c>true</c> include heading.</param>
        </member>
        <member name="M:ReactiveUI.Mobile.ReactiveGeolocator.GetPosition(System.Boolean)">
            <summary>
            Returns a single lookup of the user's current physical position
            </summary>
            <returns>The current physical location.</returns>
            <param name="includeHeading">If set to <c>true</c> include heading.</param>
        </member>
        <member name="M:ReactiveUI.Mobile.IReactiveGeolocator.Listen(System.Int32,System.Double,System.Boolean)">
            <summary>
            Returns an IObservable that continuously updates as the user's
            physical location changes. It is super important to make sure to
            dispose all subscriptions to this IObservable.
            </summary>
            <param name="minUpdateTime">Minimum update time.</param>
            <param name="minUpdateDist">Minimum update dist.</param>
            <param name="includeHeading">If set to <c>true</c> include heading.</param>
        </member>
        <member name="M:ReactiveUI.Mobile.IReactiveGeolocator.GetPosition(System.Boolean)">
            <summary>
            Returns a single lookup of the user's current physical position
            </summary>
            <returns>The current physical location.</returns>
            <param name="includeHeading">If set to <c>true</c> include heading.</param>
        </member>
        <member name="T:ReactiveUI.Mobile.ISuspensionHost">
            <summary>
            ISuspensionHost represents a standardized version of the events that the
            host operating system publishes. Subscribe to these events in order to
            handle app suspend / resume.
            </summary>
        </member>
        <member name="M:ReactiveUI.Mobile.ISuspensionHost.SetupDefaultSuspendResume(ReactiveUI.Mobile.ISuspensionDriver)">
            <summary>
            Sets up the default suspend resume behavior, which is to use the
            ISuspensionDriver to save / reload application state. Using this also
            requires you to register an IApplicationRootState that will create a
            new application root state from scratch.
            </summary>
        </member>
        <member name="P:ReactiveUI.Mobile.ISuspensionHost.IsLaunchingNew">
            <summary>
            Signals when the application is launching new. This can happen when
            an app has recently crashed, as well as the firs time the app has
            been launched. Apps should create their state from scratch.
            </summary>
        </member>
        <member name="P:ReactiveUI.Mobile.ISuspensionHost.IsResuming">
            <summary>
            Signals when the application is resuming from suspended state (i.e. 
            it was previously running but its process was destroyed). 
            </summary>
        </member>
        <member name="P:ReactiveUI.Mobile.ISuspensionHost.IsUnpausing">
            <summary>
            Signals when the application is activated. Note that this may mean 
            that your process was not actively running before this signal.
            </summary>
        </member>
        <member name="P:ReactiveUI.Mobile.ISuspensionHost.ShouldPersistState">
            <summary>
            Signals when the application should persist its state to disk.
            </summary>
            <value>Returns an IDisposable that should be disposed once the 
            application finishes persisting its state</value>
        </member>
        <member name="P:ReactiveUI.Mobile.ISuspensionHost.ShouldInvalidateState">
            <summary>
            Signals that the saved application state should be deleted, this
            usually is called after an app has crashed
            </summary>
        </member>
        <member name="T:ReactiveUI.Mobile.ISuspensionDriver">
            <summary>
            ISuspensionDriver represents a class that can load/save state to persistent
            storage. Most platforms have a basic implementation of this class, but you
            probably want to write your own.
            </summary>
        </member>
        <member name="M:ReactiveUI.Mobile.ISuspensionDriver.LoadState``1">
            <summary>
            Loads the application state from persistent storage
            </summary>
        </member>
        <member name="M:ReactiveUI.Mobile.ISuspensionDriver.SaveState``1(``0)">
            <summary>
            Saves the application state to disk.
            </summary>
        </member>
        <member name="M:ReactiveUI.Mobile.ISuspensionDriver.InvalidateState">
            <summary>
            Invalidates the application state (i.e. deletes it from disk)
            </summary>
        </member>
    </members>
</doc>
