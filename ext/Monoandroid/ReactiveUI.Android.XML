<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ReactiveUI.Android</name>
    </assembly>
    <members>
        <member name="T:ReactiveUI.Android.AndroidUIScheduler">
            <summary>
            AndroidUIScheduler is a scheduler that schedules items on a running
            Activity's main thread. This is the moral equivalent of
            DispatcherScheduler, but since every Activity runs separately, you must
            assign RxApp.MainThreadScheduler to an instance of this at the start of
            every activity.
            </summary>
        </member>
        <member name="T:ReactiveUI.ComponentModelTypeConverter">
            <summary>
            This binding type converter uses the built-in WPF component model
            conversions to get a whole bunch of conversions for free. Unfortunately,
            these are pretty gutted on some other platforms like Silverlight.
            </summary>
        </member>
        <member name="T:ReactiveUI.PlatformUnitTestDetector">
            <summary>
            Because RxUI.dll is in a PLib, it doesn't have the SuperPowers it needs
            to be able to really detect whether it's in a unit test runner. This class
            is much better at it.
            </summary>
        </member>
        <member name="T:ReactiveUI.Android.Registrations">
            <summary>
            Ignore me. This class is a secret handshake between RxUI and RxUI.Xaml
            in order to register certain classes on startup that would be difficult
            to register otherwise.
            </summary>
        </member>
        <member name="T:ReactiveUI.Android.ReactiveActivity`1">
            <summary>
            This is an Activity that is both an Activity and has ReactiveObject powers
            (i.e. you can call RaiseAndSetIfChanged)
            </summary>
        </member>
        <member name="T:ReactiveUI.Android.ReactiveActivity">
            <summary>
            This is an Activity that is both an Activity and has ReactiveObject powers
            (i.e. you can call RaiseAndSetIfChanged)
            </summary>
        </member>
        <member name="P:ReactiveUI.Android.ReactiveActivity.Changing">
            <summary>
            Represents an Observable that fires *before* a property is about to
            be changed.
            </summary>
        </member>
        <member name="P:ReactiveUI.Android.ReactiveActivity.Changed">
            <summary>
            Represents an Observable that fires *after* a property has changed.
            </summary>
        </member>
        <member name="M:ReactiveUI.Android.ReactiveActivity.SuppressChangeNotifications">
            <summary>
            When this method is called, an object will not fire change
            notifications (neither traditional nor Observable notifications)
            until the return value is disposed.
            </summary>
            <returns>An object that, when disposed, reenables change
            notifications.</returns>
        </member>
        <member name="M:ReactiveUI.Android.ReactiveActivity.RaiseAndSetIfChanged``1(``0@,``0,System.String)">
            <summary>
            RaiseAndSetIfChanged fully implements a Setter for a read-write
            property on a ReactiveObject, using CallerMemberName to raise the notification
            and the ref to the backing field to set the property.
            </summary>
            <typeparam name="TObj">The type of the This.</typeparam>
            <typeparam name="TRet">The type of the return value.</typeparam>
            <param name="This">The <see cref="T:ReactiveUI.ReactiveObject" /> raising the notification.</param>
            <param name="backingField">A Reference to the backing field for this
            property.</param>
            <param name="newValue">The new value.</param>
            <param name="propertyName">The name of the property, usually
            automatically provided through the CallerMemberName attribute.</param>
            <returns>The newly set value, normally discarded.</returns>
        </member>
        <member name="M:ReactiveUI.Android.ReactiveActivity.RaisePropertyChanged(System.String)">
            <summary>
            Use this method in your ReactiveObject classes when creating custom
            properties where raiseAndSetIfChanged doesn't suffice.
            </summary>
            <param name="This">The instance of ReactiveObject on which the property has changed.</param>
            <param name="propertyName">
            A string representing the name of the property that has been changed.
            Leave <c>null</c> to let the runtime set to caller member name.
            </param>
        </member>
        <member name="M:ReactiveUI.Android.ReactiveActivity.RaisePropertyChanging(System.String)">
            <summary>
            Use this method in your ReactiveObject classes when creating custom
            properties where raiseAndSetIfChanged doesn't suffice.
            </summary>
            <param name="This">The instance of ReactiveObject on which the property has changed.</param>
            <param name="propertyName">
            A string representing the name of the property that has been changed.
            Leave <c>null</c> to let the runtime set to caller member name.
            </param>
        </member>
        <member name="T:ReactiveUI.Android.ReactiveFragment`1">
            <summary>
            This is a Fragment that is both an Activity and has ReactiveObject powers
            (i.e. you can call RaiseAndSetIfChanged)
            </summary>
        </member>
        <member name="T:ReactiveUI.Android.ReactiveFragment">
            <summary>
            This is a Fragment that is both an Activity and has ReactiveObject powers
            (i.e. you can call RaiseAndSetIfChanged)
            </summary>
        </member>
        <member name="P:ReactiveUI.Android.ReactiveFragment.Changing">
            <summary>
            Represents an Observable that fires *before* a property is about to
            be changed.
            </summary>
        </member>
        <member name="P:ReactiveUI.Android.ReactiveFragment.Changed">
            <summary>
            Represents an Observable that fires *after* a property has changed.
            </summary>
        </member>
        <member name="M:ReactiveUI.Android.ReactiveFragment.SuppressChangeNotifications">
            <summary>
            When this method is called, an object will not fire change
            notifications (neither traditional nor Observable notifications)
            until the return value is disposed.
            </summary>
            <returns>An object that, when disposed, reenables change
            notifications.</returns>
        </member>
        <member name="M:ReactiveUI.Android.ReactiveFragment.RaiseAndSetIfChanged``1(``0@,``0,System.String)">
            <summary>
            RaiseAndSetIfChanged fully implements a Setter for a read-write
            property on a ReactiveObject, using CallerMemberName to raise the notification
            and the ref to the backing field to set the property.
            </summary>
            <typeparam name="TObj">The type of the This.</typeparam>
            <typeparam name="TRet">The type of the return value.</typeparam>
            <param name="This">The <see cref="T:ReactiveUI.ReactiveObject" /> raising the notification.</param>
            <param name="backingField">A Reference to the backing field for this
            property.</param>
            <param name="newValue">The new value.</param>
            <param name="propertyName">The name of the property, usually
            automatically provided through the CallerMemberName attribute.</param>
            <returns>The newly set value, normally discarded.</returns>
        </member>
        <member name="M:ReactiveUI.Android.ReactiveFragment.RaisePropertyChanged(System.String)">
            <summary>
            Use this method in your ReactiveObject classes when creating custom
            properties where raiseAndSetIfChanged doesn't suffice.
            </summary>
            <param name="This">The instance of ReactiveObject on which the property has changed.</param>
            <param name="propertyName">
            A string representing the name of the property that has been changed.
            Leave <c>null</c> to let the runtime set to caller member name.
            </param>
        </member>
        <member name="M:ReactiveUI.Android.ReactiveFragment.RaisePropertyChanging(System.String)">
            <summary>
            Use this method in your ReactiveObject classes when creating custom
            properties where raiseAndSetIfChanged doesn't suffice.
            </summary>
            <param name="This">The instance of ReactiveObject on which the property has changed.</param>
            <param name="propertyName">
            A string representing the name of the property that has been changed.
            Leave <c>null</c> to let the runtime set to caller member name.
            </param>
        </member>
        <member name="T:ReactiveUI.Android.AndroidDefaultPropertyBinding">
            <summary>
            Default property bindings for common Android widgets
            </summary>
        </member>
        <member name="T:ReactiveUI.Android.AndroidObservableForWidgets">
            <summary>
            Android view objects are not Generally Observableâ„¢, so hard-code some
            particularly useful types.
            </summary>
        </member>
    </members>
</doc>
